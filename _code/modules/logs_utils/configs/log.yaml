# ============================================================
# log.yaml - LogPolicy 기본 설정 (단위테스트 및 예시 용도)
# ============================================================
#
# 용도:
#   - LogManager 기본 설정
#   - 단위 테스트
#   - 간단한 콘솔 로깅
#
# 사용:
#   manager = LogManager("configs/log.yaml")
#   manager = LogManager()  # 기본값으로 이 파일 사용
#
# ============================================================

logging:
  # 기본 설정
  enabled: true
  name: "app"
  level: "INFO"
  
  # Sink 설정 (콘솔만)
  sinks:
    - sink_type: "console"
      level: "INFO"
      colorize: true
      format: "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
      enqueue: true
      backtrace: true
      diagnose: true
      catch: true
  
  # Context (선택적)
  context:
    app: "logs_utils"
    env: "dev"


# ============================================================
# 다양한 사용 예시
# ============================================================

# 1. 기본 콘솔 로깅
example_console:
  enabled: true
  name: "console_logger"
  level: "DEBUG"
  sinks:
    - sink_type: "console"
      level: "DEBUG"
      colorize: true


# 2. 파일 로깅
example_file:
  enabled: true
  name: "file_logger"
  level: "INFO"
  sinks:
    - sink_type: "file"
      filepath: "logs/app.log"
      level: "INFO"
      rotation: "10 MB"
      retention: "7 days"
      compression: "zip"
      format: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}"


# 3. 콘솔 + 파일 (다중 Sink)
example_multi_sink:
  enabled: true
  name: "multi_logger"
  level: "DEBUG"
  sinks:
    # 콘솔: INFO 이상
    - sink_type: "console"
      level: "INFO"
      colorize: true
      format: "<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>"
    
    # 파일: DEBUG 이상 (모든 로그)
    - sink_type: "file"
      filepath: "logs/debug.log"
      level: "DEBUG"
      rotation: "1 day"
      retention: "7 days"
      format: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}"
    
    # 에러 로그 별도 파일
    - sink_type: "file"
      filepath: "logs/error.log"
      level: "ERROR"
      rotation: "10 MB"
      retention: "30 days"
      compression: "zip"
      format: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}\n{exception}"


# 4. 운영 환경 (간결한 포맷)
example_production:
  enabled: true
  name: "prod_logger"
  level: "WARNING"
  sinks:
    - sink_type: "console"
      level: "WARNING"
      colorize: false
      format: "{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
      serialize: false
    
    - sink_type: "file"
      filepath: "logs/production.log"
      level: "INFO"
      rotation: "100 MB"
      retention: "30 days"
      compression: "gz"
      format: "{time:YYYY-MM-DD HH:mm:ss} | {level} | {name} | {message}"


# 5. 개발 환경 (상세한 포맷)
example_development:
  enabled: true
  name: "dev_logger"
  level: "TRACE"
  sinks:
    - sink_type: "console"
      level: "TRACE"
      colorize: true
      format: "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
      backtrace: true
      diagnose: true
  
  context:
    env: "development"
    debug: true


# 6. 로깅 비활성화
example_disabled:
  enabled: false
  name: "disabled_logger"
  level: "INFO"
  sinks:
    - sink_type: "console"


# 7. Context 활용
example_with_context:
  enabled: true
  name: "context_logger"
  level: "INFO"
  sinks:
    - sink_type: "console"
      level: "INFO"
      format: "<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{extra[service]}</cyan> | <level>{message}</level>"
  
  context:
    service: "my_service"
    version: "1.0.0"
    region: "kr-central"
    instance_id: "i-12345"


# ============================================================
# 사용 예시 (Python 코드)
# ============================================================
#
# 1. 기본 로깅
# ```python
# from logs_utils import LogManager
# 
# manager = LogManager("configs/log.yaml")
# manager.logger.info("Hello")
# ```
#
# 2. 특정 섹션 사용
# ```python
# from cfg_utils_v2 import ConfigLoader
# from logs_utils import LogPolicy, LogManager
# 
# loader = ConfigLoader(
#     base_sources=[(LogPolicy(), "logging")],
#     override_sources=[("configs/log.yaml", "example_production")]
# )
# policy = loader.to_model(LogPolicy, section="example_production")
# manager = LogManager(policy)
# ```
#
# 3. Override
# ```python
# manager = LogManager(
#     "configs/log.yaml",
#     name="custom_logger",
#     level="DEBUG"
# )
# ```
#
# ============================================================
