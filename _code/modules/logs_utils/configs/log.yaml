# ========================================
# Logging Configuration (LogPolicy + SinkPolicy)
# ========================================
# logs_utils 리팩토링 버전 (Pydantic BaseModel 기반)
# - LogPolicy: 전체 로깅 정책
# - SinkPolicy: 개별 출력 대상 정책 (file/console)

# ────────────────────────────────────────
# Logger 이름 (필수)
# ────────────────────────────────────────
name: "crawl_logger"

# ────────────────────────────────────────
# Sinks: 로그 출력 대상 목록 (필수)
# ────────────────────────────────────────
# 여러 Sink를 병렬로 등록 가능:
#   - 일반 로그 파일
#   - 콘솔 출력
#   - 에러 전용 파일
#   - JSON 형식 로그
sinks:
  # ════════════════════════════════════════
  # 1️⃣ 일반 파일 로그 Sink (INFO 이상)
  # ════════════════════════════════════════
  - sink_type: "file"                               # "file" 또는 "console"
    filepath: "output/logs/crawl/{time:YYYY-MM-DD}_app.log"
    
    # ──── 로그 레벨 ────
    level: "INFO"                                   # DEBUG/INFO/WARNING/ERROR/CRITICAL
    
    # ──── 파일 회전 정책 (loguru native) ────
    rotation: "10 MB"                               # 크기 기준: "10 MB", "500 KB"
    # rotation: "00:00"                             # 시간 기준: 매일 0시
    # rotation: "1 week"                            # 주기 기준: 1주일마다
    
    # ──── 로그 보관 정책 ────
    retention: "7 days"                             # 7일 지난 로그 자동 삭제
    # retention: "1 month"                          # 1개월 보관
    # retention: 10                                 # 최근 10개 파일만 유지
    
    # ──── 압축 설정 ────
    compression: "zip"                              # zip/tar/tar.gz/tar.bz2
    
    # ──── 로그 포맷 ────
    format: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level:<8} | {name:<15} | {message}"
    
    # ──── 고급 옵션 ────
    enqueue: true                                   # 비동기/멀티스레드 안전 모드
    serialize: false                                # JSON 직렬화 여부
    backtrace: true                                 # Exception 시 전체 스택 추적
    diagnose: false                                 # 코드 변수값 출력 (보안 주의)
    colorize: false                                 # 파일에는 색상 비활성화
    catch: true                                     # 로거 내부 예외 처리

  # ════════════════════════════════════════
  # 2️⃣ 콘솔 Sink (개발/디버깅용)
  # ════════════════════════════════════════
  - sink_type: "console"
    # filepath는 console일 때 None/null
    
    level: "DEBUG"                                  # 콘솔에는 더 낮은 레벨
    
    # 콘솔용 간결한 포맷 (색상 포함)
    format: "<green>{time:HH:mm:ss}</green> | <level>{level:<8}</level> | <cyan>{name}</cyan> | <level>{message}</level>"
    
    colorize: true                                  # ANSI 색상 활성화
    enqueue: false                                  # 콘솔은 동기 출력
    backtrace: false                                # 콘솔엔 간단한 메시지만
    diagnose: false
    catch: true

  # ════════════════════════════════════════
  # 3️⃣ 에러 전용 파일 Sink
  # ════════════════════════════════════════
  - sink_type: "file"
    filepath: "output/logs/crawl/errors/{time:YYYY-MM-DD}_error.log"
    
    level: "ERROR"                                  # ERROR 이상만 기록
    
    rotation: "50 MB"                               # 에러 로그는 더 큰 크기
    retention: "30 days"                            # 30일 보관
    compression: "zip"
    
    # 에러 로그는 최대한 상세하게
    format: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level:<8} | {name:<15} | {file}:{line} | {function} | {message}"
    
    enqueue: true
    serialize: false
    backtrace: true                                 # 전체 traceback
    diagnose: true                                  # 변수값 포함 (디버깅)
    colorize: false
    catch: true

  # ════════════════════════════════════════
  # 4️⃣ JSON 구조화 로그 (선택적)
  # ════════════════════════════════════════
  - sink_type: "file"
    filepath: "output/logs/crawl/{time:YYYY-MM-DD}_structured.json"
    
    level: "INFO"
    
    rotation: "20 MB"
    retention: "14 days"
    compression: null                               # JSON은 압축 안 함
    
    format: "{message}"                             # serialize=true일 때는 단순 포맷
    
    enqueue: true
    serialize: true                                 # JSON 형식으로 저장
    backtrace: true
    diagnose: false
    colorize: false
    catch: true

# ────────────────────────────────────────
# 사용 예시
# ────────────────────────────────────────
# from logs_utils import create_logger, LogContextManager
#
# # 방법 1: Factory 함수
# manager = create_logger("log.yaml")
# manager.logger.info("로깅 시작")
#
# # 방법 2: Context Manager
# with LogContextManager("log.yaml") as log:
#     log.info("작업 시작")
#     log.warning("경고 메시지")
#     log.success("작업 완료")
#
# # 방법 3: Runtime Override
# manager = create_logger("log.yaml", name="custom_logger", level="DEBUG")
#
# # 방법 4: Dictionary로 직접 설정
# config = {
#     "name": "my_app",
#     "sinks": [
#         {"sink_type": "console", "level": "INFO"},
#         {"sink_type": "file", "filepath": "app.log", "rotation": "1 MB"}
#     ]
# }
# manager = create_logger(config)
